# Set variables
EXE=donut
INC_DIR=inc
SRC_DIR=src
OBJ_DIR=obj
BIN_DIR=bin
USR_DIR=/usr/local/bin/
OS=$(shell uname -s)
ARCH=$(shell uname -m)
ARM=$(findstring arm,$(ARCH))
DEFS=-DN_CPU=$(CPU) -DOPEN_MAX=$(OPEN_MAX) -DPAGE_SIZE=$(PAGE_SIZE) -DCACHE_LINE=$(CACHE_LINE_SIZE) -DI_CACHE=$(INSTRUCTION_CACHE) -DD_CACHE=$(DATA_CACHE) -DL2_CACHE_SIZE=$(L2_CACHE_SIZE) -DL3_CACHE_SIZE=$(L3_CACHE_SIZE)
CFLAGS=-O3 -Wall -g -std=c99 -Iinc -pedantic $(DEFS)
CC=@CC@

# Default Hardware Config Variabes
DEFAULT_PAGE_SIZE=64
DEFAULT_OPEN_MAX=256
DEFAULT_CACHE_LINE_SIZE=64
DEFAULT_NUMBER_CPUS=1
DEFAULT_I_CACHE_SIZE=32768
DEFAULT_D_CACHE_SIZE=32768
DEFAULT_L2_CACHE_SIZE=0
DEFAULT_L3_CACHE_SIZE=0

# Hardware Variables
ifeq ($(ARM), arm)
	OPEN_MAX=$(DEFAULT_OPEN_MAX)
	PAGE_SIZE=$(DEFAULT_PAGE_SIZE)
	CACHE_LINE_SIZE=$(DEFAULT_CACHE_LINE_SIZE)
	CPU=$(DEFAULT_NUMBER_CPUS)
	INSTRUCTION_CACHE=$(DEFAULT_I_CACHE_SIZE)
	DATA_CACHE=$(DEFAULT_D_CACHE_SIZE)
	L2_CACHE_SIZE=$(DEFAULT_L2_CACHE_SIZE)
	L3_CACHE_SIZE=$(DEFAULT_L3_CACHE_SIZE)
else ifeq ($(OS), Darwin)
	OPEN_MAX_CMD := $(shell getconf OPEN_MAX | tr -dc '[:digit:]')
	OPEN_MAX := $(if $(OPEN_MAX_CMD),$(OPEN_MAX_CMD),$(DEFAULT_OPEN_MAX))
	PAGE_SIZE_CMD := $(shell sysctl -a | grep -i hw.pagesize: | cut -d' ' -f2 | tr -dc '[:digit:]')
	PAGE_SIZE := $(if $(PAGE_SIZE_CMD),$(PAGE_SIZE_CMD),$(DEFAULT_PAGE_SIZE))
	CACHE_LINE_CMD := $(shell sysctl -a | grep -i hw.cachelinesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	CACHE_LINE_SIZE := $(if $(CACHE_LINE_CMD),$(CACHE_LINE_CMD),$(DEFAULT_CACHE_LINE_SIZE))
	NUM_CPUS := $(shell sysctl -a | grep -i hw.physicalcpu | cut -d' ' -f2 | tr -dc '[:digit:]')
	CPU := $(if $(NUM_CPUS),$(NUM_CPUS),$(DEFAULT_NUMBER_CPUS))
	I_CACHE_CMD := $(shell sysctl -a | grep -i hw.l1icachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	INSTRUCTION_CACHE := $(if $(I_CACHE_CMD),$(I_CACHE_CMD),$(DEFAULT_I_CACHE_SIZE))
	D_CACHE_CMD := $(shell sysctl -a | grep -i hw.l1dcachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	DATA_CACHE := $(if $(D_CACHE_CMD),$(D_CACHE_CMD),$(DEFAULT_D_CACHE_SIZE))
	L2_CACHE_CMD := $(shell sysctl -a | grep -i hw.l2cachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	L2_CACHE_SIZE := $(if $(L2_CACHE_CMD),$(L2_CACHE_CMD),$(DEFAULT_L2_CACHE_SIZE))
	L3_CACHE_CMD := $(shell sysctl -a | grep -i hw.l3cachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	L3_CACHE_SIZE := $(if $(L3_CACHE_CMD),$(L3_CACHE_CMD),$(DEFAULT_L3_CACHE_SIZE))
else ifeq ($(OS), FreeBSD)
	OPEN_MAX_CMD := $(shell getconf OPEN_MAX | tr -dc '[:digit:]')
	OPEN_MAX := $(if $(OPEN_MAX_CMD),$(OPEN_MAX_CMD),$(DEFAULT_OPEN_MAX))
	PAGE_SIZE_CMD := $(shell sysctl -a | grep -i hw.pagesize: | cut -d' ' -f2 | tr -dc '[:digit:]')
	PAGE_SIZE := $(if $(PAGE_SIZE_CMD),$(PAGE_SIZE_CMD),$(DEFAULT_PAGE_SIZE))
	CACHE_LINE_CMD := $(shell sysctl -a | grep -i hw.cachelinesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	CACHE_LINE_SIZE := $(if $(CACHE_LINE_CMD),$(CACHE_LINE_CMD),$(DEFAULT_CACHE_LINE_SIZE))
	NUM_CPUS := $(shell sysctl -a | grep -i hw.physicalcpu | cut -d' ' -f2 | tr -dc '[:digit:]')
	CPU := $(if $(NUM_CPUS),$(NUM_CPUS),$(DEFAULT_NUMBER_CPUS))
	I_CACHE_CMD := $(shell sysctl -a | grep -i hw.l1icachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	INSTRUCTION_CACHE := $(if $(I_CACHE_CMD),$(I_CACHE_CMD),$(DEFAULT_I_CACHE_SIZE))
	D_CACHE_CMD := $(shell sysctl -a | grep -i hw.l1dcachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	DATA_CACHE := $(if $(D_CACHE_CMD),$(D_CACHE_CMD),$(DEFAULT_D_CACHE_SIZE))
	L2_CACHE_CMD := $(shell sysctl -a | grep -i hw.l2cachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	L2_CACHE_SIZE := $(if $(L2_CACHE_CMD),$(L2_CACHE_CMD),$(DEFAULT_L2_CACHE_SIZE))
	L3_CACHE_CMD := $(shell sysctl -a | grep -i hw.l3cachesize | cut -d' ' -f2 | tr -dc '[:digit:]')
	L3_CACHE_SIZE := $(if $(L3_CACHE_CMD),$(L3_CACHE_CMD),$(DEFAULT_L3_CACHE_SIZE))
else ifeq ($(OS), Linux)
	OPEN_MAX_CMD := $(shell getconf -a | grep -i OPEN_MAX | tr -dc '[:digit:]')
	OPEN_MAX := $(if $(OPEN_MAX_CMD),$(OPEN_MAX_CMD),$(DEFAULT_OPEN_MAX))
	PAGE_SIZE_CMD := $(shell getconf -a | grep -i PAGE_SIZE | tr -dc '[:digit:]')
	PAGE_SIZE := $(if $(PAGE_SIZE_CMD),$(PAGE_SIZE_CMD),$(DEFAULT_PAGE_SIZE))
	CACHE_LINE_CMD := $(shell getconf -a | grep -i LEVEL1_DCACHE_LINESIZE | tr -dc '[:digit:]')
	CACHE_LINE_SIZE := $(if $(CACHE_LINE_CMD),$(CACHE_LINE_CMD),$(DEFAULT_CACHE_LINE_SIZE))
	SOCKETS := $(shell lscpu | grep -i "Socket(s):" | tr -d [[:blank:]] | cut -d ':' -it:])
	CORES := $(shell lscpu | grep -i "Core(s) per socket:" | tr -d [[:blank:]] | cut -d ':' -it:])
	NUM_CPUS := $(shell $(( $(SOCKETS) * $(CORES) )))
	CPU := $(if $(NUM_CPUS),$(NUM_CPUS),$(DEFAULT_NUMBER_CPUS))
	I_CACHE_CMD := $(shell getconf -a | grep -i LEVEL1_ICACHE_SIZE | tr -dc '[:digit:]')
	INSTRUCTION_CACHE := $(if $(I_CACHE_CMD),$(I_CACHE_CMD),$(DEFAULT_I_CACHE_SIZE))
	D_CACHE_CMD := $(shell getconf -a | grep -i LEVEL1_DCACHE_SIZE | tr -dc '[:digit:]')
	DATA_CACHE := $(if $(D_CACHE_CMD),$(D_CACHE_CMD),$(DEFAULT_D_CACHE_SIZE))
	L2_CACHE_CMD := $(shell getconf -a | grep -i LEVEL2_CACHE_SIZE | tr -dc '[:digit:]')
	L2_CACHE_SIZE := $(if $(L2_CACHE_CMD),$(L2_CACHE_CMD),$(DEFAULT_L2_CACHE_SIZE))
	L3_CACHE_CMD := $(shell getconf -a | grep -i LEVEL3_CACHE_SIZE | tr -dc '[:digit:]')
	L3_CACHE_SIZE := $(if $(L3_CACHE_CMD),$(L3_CACHE_CMD),$(DEFAULT_L3_CACHE_SIZE))
else
	OPEN_MAX=$(DEFAULT_OPEN_MAX)
	PAGE_SIZE=$(DEFAULT_PAGE_SIZE)
	CACHE_LINE_SIZE=$(DEFAULT_CACHE_LINE_SIZE)
	CPU=$(DEFAULT_NUMBER_CPUS)
	INSTRUCTION_CACHE=$(DEFAULT_I_CACHE_SIZE)
	DATA_CACHE=$(DEFAULT_D_CACHE_SIZE)
	L2_CACHE_SIZE=$(DEFAULT_L2_CACHE_SIZE)
	L3_CACHE_SIZE=$(DEFAULT_L3_CACHE_SIZE)
endif


# List source files
SRC=$(wildcard $(SRC_DIR)/*.c) $(wildcard $(SRC_DIR)/*/*.c)
OBJ=$(SRC:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
OUT=$(wildcard $(BIN_DIR)/*)

#Target - Actual Program
all: $(EXE)
	@mv $(EXE) $(BIN_DIR)/
	@echo [LD] Executable is ready!

$(EXE): $(OBJ)
	@echo [CC] Compiled all objects
	@echo [LD] Linking object files
	@$(CC) $^ -o $@
	@echo [LD] Linked all object files

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c prep
	@mkdir -p $(@D)
	@$(CC) -I$(INC_DIR) $(CFLAGS) -c $< -o $@
	@echo [CC] Compiling $@

prep:
	@if [ -d $(OBJ_DIR) ]; then continue; else mkdir $(OBJ_DIR); fi
	@if [ -d $(BIN_DIR) ]; then continue; else mkdir $(BIN_DIR); fi

install:
	@echo [Donut] Installing Program into /usr/bin/local
	@sudo mv $(BIN_DIR)/$(EXE) $(USR_DIR)
	@echo [Donut] Installation Completed
	@echo [Donut] Use -h or --help for argument options

# Clean Action
clean:
	@rm -r $(OBJ_DIR)
	@rm -r $(BIN_DIR)
	@rm $(SRC_DIR)/*.o
	@rm -r "autom4te.cache/"
	@rm -r "config.log"
	@rm -r "config.status"
	@rm -r "configure"
	@echo [Donut] Cleaned previous compilation

uninstall:
	@rm $(USR_DIR)/$(EXE)
	@echo [Donut] Uninstalled
